= tc-topts
Annotation-based command-line option parsing library in Java

== Purpose

`tc-opts` is an annotation-based command-line option parsing library in Java.

Why yet another one? What are the main benefits of this library?

- *Annotation-based*: no need to build options through some DSL or many lines
  of setter invocation
- *Only one syntax* type is supported: yes, this is a feature, no choosing
  between POSIX or whatever options, think of it as convention over
  configuration
- Very *lightweight*: not many classes to learn about, in fact the whole
  documentation fits into a simple README file
- Only *two concepts* to grasp: options (the `--something`) and option
  arguments (the thing that may be found after the `--something` on the
  command-line)
- Uses *unchecked exceptions* from the standard API to reports errors
  (`IllegalStateException` for configuration errors, `IllegalArgumentException`
  for command-line argument errors)
- *General-purpose base classes* are provided: an abstract class supports `-q`
  (`--quiet`), `-v` (`--verbose`), `-h` (`--help`) out of the box so you don't
  rewrite the same exact code in each command-line application you develop (it
  even comes with automatic Log4j level settings for those who need it)

== Usage

=== Implement `java.lang.Runnable` and describe the command executable

----
@Command("java -jar sample.jar")
public final class SampleExecutor implements Runnable
----

=== Define an option with a parameter

----
@Option(shortName = "s", longName = "size", description = "the size parameter")
public void setSize(final int size)
{
  this.size = size;
}
----

`tc-opts` will convert the literal parameter to the right Java type according
to the method signature.

=== Define a switch (option without a parameter)

----
@Option(shortName = "l", longName = "list-features", description = "List the available features and exit", exit = true)
public void listFeatures()
{
  System.out.println("these are the features");
}
----

If the method returns an `int` value and the `exit` property is set to `true`
then the returned value is used as the exit code for the application.

=== Implement the `run()` method
----
public void run()
{
  System.out.println("Hello, World!);
}
----

== TODO

- Improve argument parsing, e.g. KEY=VALUE
- Get the exit code depending on the `Exception` class
- Allow non-option arguments to be handled
- Add more documentation

// vim: set syntax=asciidoc:
// vim: set spell:
