= tc-topts
Annotation-based command-line option Java library

== Usage

.Implement `java.lang.Runnable` and describe the command executable
----
@Command("java -jar sample.jar")
public final class SampleExecutor implements Runnable
----

.Define an option with a parameter
----
@Option(shortName = "s", longName = "size", description = "the size parameter")
public void setSize(final int size)
{
  this.size = size;
}
----

`tc-opts` will convert the literal parameter to the right Java type according
to the method signature

.Define a switch (option without a parameter)
----
@Option(shortName = "l", longName = "list-features", description = "List the available features and exit", exit = true)
public void listFeatures()
{
  System.out.println("these are the features");
}
----

If the method returns an `int` value and the `exit` property is set to `true`
then the returned value is used as the exit code for the application.

.Implement the `run()` method
----
public void run()
{
  System.out.println("Hello, World!);
}
----

== TODO

- Get the exit code depending on the `Exception` class
- Allow non-option arguments to be handled
- Add more documentation

// vim: set syntax=asciidoc:
// vim: set spell:
